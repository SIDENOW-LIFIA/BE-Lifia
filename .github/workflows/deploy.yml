# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy to Amazon EC2 # workflow의 이름

on: # event를 정의하는 곳
  push:
    branches:
      - 'master' # master에 push할 때
      
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: lifiabucket
  CODE_DEPLOY_APPLICATION_NAME: Lifia-CICD
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: Lifia-CICD-Group

permissions:
  contents: read

jobs: # job들을 정의하는 곳
  build:
    runs-on: ubuntu-22.04 # 아래의 steps들이 어떤 환경(OS)에서 실행될 것인지 지정

    steps:
    # (1) 기본 체크아웃
    - name: dev 브랜치로 이동
      uses: actions/checkout@v3
      with:
        ref: dev

    # (2) JDK 17 세팅
    - name: JDK 17 설치
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # (3) gradlew에 실행권한 부여 
    - name: gradlew에 실행권한 부여
      run: chmod +x gradlew
    # (3-1) Gradle build (Test 제외)
    - name: 프로젝트 빌드 
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: clean build -x test

    # (4) AWS 인증 및 계정 설정
    - name: AWS Credential 설정 (IAM 사용자 Access Key, Secret Key 활용)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{env.AWS_REGION}}
        aws-access-key-id: ${{secrets.CICD_ACCESS_KEY}} # Github Secret에 넣어둔 Access Key
        aws-secret-access-key: ${{secrets.CICD_SECRET_KEY}} # Github Secret에 넣어둔 Secret Key

    # (5) S3 버킷 업로드
    - name: 빌드 결과물을 S3 버킷에 업로드
      run: |
        aws deploy push \
          --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

    # (6) CodeDeploy 실행 및 EC2 배포
    - name: S3 버킷에 있는 파일을 대상으로 Code Deploy 실행 및 EC2 배포
      run: |
        aws deploy create-deployment \
          --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME}} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
